name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Add required permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend, e2e-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci
      
      - name: Run linting
        if: matrix.component != 'e2e-tests'
        run: |
          cd ${{ matrix.component }}
          npm run lint
        continue-on-error: false
      
      - name: Run type checking
        if: matrix.component != 'e2e-tests'
        run: |
          cd ${{ matrix.component }}
          npx tsc --noEmit
        continue-on-error: false
      
      - name: Run tests
        run: |
          cd ${{ matrix.component }}
          npm test
        continue-on-error: false
      
      - name: Run security audit
        run: |
          cd ${{ matrix.component }}
          npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Build application
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm run build
      
      - name: Upload build artifacts
        if: matrix.component == 'frontend'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    # Add explicit permissions for this job
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-fs-scan'
        continue-on-error: true
      
      - name: Upload security scan results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: 'trivy-results.sarif'
          retention-days: 30

  # Job 3: Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    # Add explicit permissions for Docker registry
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job 4: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup deployment environment
        run: |
          chmod +x scripts/deploy.sh
          sudo apt-get update && sudo apt-get install -y curl
      
      - name: Deploy to staging using Docker Compose
        run: |
          echo "üöÄ Deploying to staging environment..."
          # For staging, we would typically deploy to a staging server
          # This is a placeholder for actual staging deployment
          echo "Staging deployment would use:"
          echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:develop"
          echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:develop"
          echo "Deployment script: ./scripts/deploy.sh --type docker-compose --env staging"
      
      - name: Run health checks
        run: |
          echo "üîç Running health checks on staging..."
          # Placeholder for actual staging health checks
          # In real deployment, this would check staging URLs
          echo "Health checks would verify:"
          echo "- Staging frontend accessibility"
          echo "- Staging backend /health endpoint"
          echo "- Database connectivity"
      
      - name: Notify deployment status
        if: always()
        run: |
          echo "üì¢ Staging deployment completed"
          echo "Status: ${{ job.status }}"

  # Job 5: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup deployment environment
        run: |
          chmod +x scripts/deploy.sh
          sudo apt-get update && sudo apt-get install -y curl
      
      - name: Deploy to production using Docker Compose
        run: |
          echo "üöÄ Deploying to production environment..."
          # For production, we would typically deploy to production servers
          # This is a placeholder for actual production deployment
          echo "Production deployment would use:"
          echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
          echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
          echo "Deployment script: ./scripts/deploy.sh --type docker-compose --env production"
      
      - name: Run health checks
        run: |
          echo "üîç Running health checks on production..."
          # Placeholder for actual production health checks
          # In real deployment, this would check production URLs
          echo "Health checks would verify:"
          echo "- Production frontend accessibility"
          echo "- Production backend /health endpoint"
          echo "- Database connectivity"
          echo "- SSL certificate validity"
      
      - name: Notify deployment status
        if: always()
        run: |
          echo "üì¢ Production deployment completed"
          echo "Status: ${{ job.status }}"

  # Job 6: E2E Tests (Post-deployment)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: e2e-tests/package-lock.json
      
      - name: Install dependencies
        run: |
          cd e2e-tests
          npm ci
      
      - name: Install Playwright browsers
        run: |
          cd e2e-tests
          npx playwright install --with-deps
      
      - name: Run E2E tests against staging
        run: |
          cd e2e-tests
          # For now, run tests against local environment
          # In real deployment, this would test against staging URL
          echo "E2E tests would run against staging environment"
          echo "BASE_URL would be set to staging URL"
          # npm test
        env:
          BASE_URL: ${{ vars.STAGING_URL || 'http://localhost:5173' }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: e2e-tests/test-results
          retention-days: 7 