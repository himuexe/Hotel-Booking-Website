name: Security Monitoring & Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Job 1: Dependency Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend, e2e-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci
      
      - name: Run security audit
        run: |
          cd ${{ matrix.component }}
          npm audit --audit-level=moderate --json > audit-results.json || true
        continue-on-error: true
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ matrix.component }}
          path: ${{ matrix.component }}/audit-results.json
          retention-days: 30

  # Job 2: Dependency Updates Check
  dependency-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Check for outdated packages
        run: |
          echo "## Frontend Dependencies" > dependency-report.md
          cd frontend && npm outdated --json > ../frontend-outdated.json || true
          echo "## Backend Dependencies" >> ../dependency-report.md
          cd ../backend && npm outdated --json > ../backend-outdated.json || true
          echo "## E2E Tests Dependencies" >> ../dependency-report.md
          cd ../e2e-tests && npm outdated --json > ../e2e-outdated.json || true
      
      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-updates
          path: |
            dependency-report.md
            frontend-outdated.json
            backend-outdated.json
            e2e-outdated.json
          retention-days: 30

  # Job 3: Docker Image Security Scan
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    # Add explicit permissions for security scanning
    permissions:
      contents: read
      security-events: write
      actions: read
    
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image for scanning
        run: |
          docker build -t security-scan:${{ matrix.component }} ./${{ matrix.component }}
      
      - name: Run Trivy security scan (JSON format)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'security-scan:${{ matrix.component }}'
          format: 'json'
          output: 'trivy-${{ matrix.component }}.json'
        continue-on-error: true
      
      - name: Run Trivy security scan (SARIF format)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'security-scan:${{ matrix.component }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.component }}.sarif'
        continue-on-error: true
      
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.component }}.sarif'
          category: 'trivy-docker-${{ matrix.component }}'
        continue-on-error: true
      
      - name: Upload security scan results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-${{ matrix.component }}
          path: |
            trivy-${{ matrix.component }}.json
            trivy-${{ matrix.component }}.sarif
          retention-days: 30

  # Job 4: Performance Monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build application
        run: |
          cd frontend
          npm run build
      
      - name: Analyze bundle size with vite-bundle-analyzer
        run: |
          cd frontend
          # Check if vite-bundle-analyzer is available
          if npm list vite-bundle-analyzer > /dev/null 2>&1; then
            echo "Running bundle analysis..."
            npx vite-bundle-analyzer dist --json > bundle-analysis.json
          else
            echo "vite-bundle-analyzer not found, generating basic bundle report..."
            # Generate basic bundle size report
            echo "{\"bundleSize\": \"$(du -sh dist | cut -f1)\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > bundle-analysis.json
            # List files with sizes
            find dist -type f -name "*.js" -o -name "*.css" | xargs ls -lh >> bundle-analysis.json
          fi
        continue-on-error: true
      
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: frontend/bundle-analysis.json
          retention-days: 30

  # Job 5: Health Check Monitoring
  health-monitoring:
    name: Health Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Check production health endpoints
        run: |
          echo "🔍 Checking production health endpoints..."
          
          # Check if production URL is configured
          if [ -n "${{ vars.PRODUCTION_URL }}" ]; then
            echo "Production URL configured: ${{ vars.PRODUCTION_URL }}"
            if curl -f "${{ vars.PRODUCTION_URL }}/health" --max-time 30; then
              echo "✅ Production health check passed"
            else
              echo "❌ Production health check failed"
              exit 1
            fi
          else
            echo "⚠️ Production URL not configured in repository variables"
            echo "To enable health checks, set PRODUCTION_URL in repository variables"
            echo "Example: https://your-production-domain.com"
          fi
      
      - name: Check staging health endpoints
        run: |
          echo "🔍 Checking staging health endpoints..."
          
          # Check if staging URL is configured
          if [ -n "${{ vars.STAGING_URL }}" ]; then
            echo "Staging URL configured: ${{ vars.STAGING_URL }}"
            if curl -f "${{ vars.STAGING_URL }}/health" --max-time 30; then
              echo "✅ Staging health check passed"
            else
              echo "❌ Staging health check failed"
              exit 1
            fi
          else
            echo "⚠️ Staging URL not configured in repository variables"
            echo "To enable health checks, set STAGING_URL in repository variables"
            echo "Example: https://staging.your-domain.com"
          fi
      
      - name: Generate health report
        run: |
          echo "# Health Check Report - $(date)" > health-report.md
          echo "" >> health-report.md
          
          if [ -n "${{ vars.PRODUCTION_URL }}" ]; then
            echo "## Production Status: ✅ Monitored" >> health-report.md
            echo "- URL: ${{ vars.PRODUCTION_URL }}" >> health-report.md
          else
            echo "## Production Status: ⚠️ Not Configured" >> health-report.md
            echo "- Configure PRODUCTION_URL in repository variables" >> health-report.md
          fi
          
          if [ -n "${{ vars.STAGING_URL }}" ]; then
            echo "## Staging Status: ✅ Monitored" >> health-report.md
            echo "- URL: ${{ vars.STAGING_URL }}" >> health-report.md
          else
            echo "## Staging Status: ⚠️ Not Configured" >> health-report.md
            echo "- Configure STAGING_URL in repository variables" >> health-report.md
          fi
          
          echo "" >> health-report.md
          echo "## Last Check: $(date -u)" >> health-report.md
          echo "" >> health-report.md
          echo "## Setup Instructions" >> health-report.md
          echo "To enable automated health monitoring:" >> health-report.md
          echo "1. Go to repository Settings > Secrets and variables > Actions" >> health-report.md
          echo "2. Add repository variables:" >> health-report.md
          echo "   - PRODUCTION_URL: https://your-production-domain.com" >> health-report.md
          echo "   - STAGING_URL: https://staging.your-domain.com" >> health-report.md
      
      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: health-report.md
          retention-days: 7 